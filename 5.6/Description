Przygotuj funkcje do wczytywania i zapisywania zbiorów dużych liczb do plików oraz do sortowania i sumowania wszystkich elementów zbioru. Funkcje powinny mieć następujące prototypy:

int save_big_numbers_b(const struct big_numbers_t *bn, const char *filename);
int load_big_numbers_b(struct big_numbers_t **bn, const char *filename);
int sort_big_numbers_asc(struct big_numbers_t *bn);
char* total_sum_big_numbers(const struct big_numbers_t *bn, int *err_code);
Deklaracje wszystkich funkcji oraz struktur powinny być umieszczone w pliku big_numbers.h, a definicje w pliku big_numbers.c.

int save_big_numbers_b(const struct big_numbers_t *bn, const char *filename);
Funkcja zapisuje zbiór dużych liczb bn do pliku o nazwie filename.

Funkcja zwraca:

0 w przypadku sukcesu,
1 w przypadku przekazania do niej błędnych danych wejściowych
2 jeżeli nie uda się utworzyć pliku.
Binarny format pliku jest następujący:

4 bajty (liczba całkowita) - liczba dużych liczb, zapisanych w bn (pole size). Następnie size razy (dla każdej dużej liczby w bn) powtarza się sekwencja (pkt. 2, pkt. 3):
4 bajty (liczba całkowita) - długość n dużej liczby, bez terminatora,
n bajtów - kolejne znaki dużej liczby (bez terminatora).
Przykład zawartości pliku wyjściowego (polecenie hexdump -C):

00000000  0f 00 00 00 02 00 00 00  34 31 03 00 00 00 2d 35  |........41....-5|
00000010  37 03 00 00 00 2d 37 30  02 00 00 00 33 39 02 00  |7....-70....39..|
00000020  00 00 35 39 03 00 00 00  2d 39 38 03 00 00 00 2d  |..59....-98....-|
00000030  33 35 03 00 00 00 2d 39  39 03 00 00 00 2d 32 39  |35....-99....-29|
00000040  02 00 00 00 36 34 03 00  00 00 2d 32 36 03 00 00  |....64....-26...|
00000050  00 2d 36 31 03 00 00 00  2d 35 39 03 00 00 00 2d  |.-61....-59....-|
00000060  34 38 03 00 00 00 2d 31  32                       |48....-12|
00000069
int load_big_numbers_b(struct big_numbers_t **bn, const char *filename);
Funkcja wczytuje liczby z pliku o nazwie filename do struktury bn (przydzielając jednocześnie pamięć na nią).

Funkcja zwraca:

0 - w przypadku sukcesu,
1 - w przypadku podania błędnych danych wejściowych,
2 - jeżeli nie uda się zaalokować wystarczającej ilości pamięci
3 - jeżeli plik nie istnieje,
4 - jeżeli dane w pliku są uszkodzone.
Funkcja może przydzielić dokładnie tyle pamięci ile jest potrzebne do przechowania danych odczytanych z pliku.

int sort_big_numbers_asc(struct big_numbers_t *bn);
Funkcja sortuje rosnąco liczby znajdujące się w strukturze bn.

Funkcja zwraca:

1 - w przypadku błędnych danych wejściowych lub
0 - w przypadku powodzenia.
Sortowanie należy zrealizować z punktu widzenia wartości numerycznych liczb a nie napisów tekstowych.

char* total_sum_big_numbers(const struct big_numbers_t *bn, int *err_code);
Funkcja oblicza sumę wszystkich liczb zapisanych w strukturze bn i zwraca:

wskaźnik na obliczoną sumę (długą liczbę) lub
NULL w przypadku niepowodzenia, np. brak pamięci, brak liczb w bn, NULL w bn, niezgodność wartości pól struktury bn, itd.
W przypadku mozliwości ustawienia kodu błędu (wskaźnik err_code) funkcja powinna przewidywać następujące kody błedów:

1 - w przypadku przekazania błędnych danych,
2 - jeżeli w strukturze będą się znajdowały niepoprawne liczby,
3 - w przypadku niepowodzenia przydzielenia pamięci,
0 - jeżeli wyznaczenie sumy zakończy się sukcesem.
Napisz program, który pobierze od użytkownika nazwę pliku, a następnie odczyta z niego wszystkie liczby w nim zapisane. Na nazwę pliku przygotuj tablicę znaków, alokowaną dynamicznie na 30 znaków. Po pobraniu nazwy wczytaj plik.

Jeśli zabrakło pamięci podczas przygotowywania bufora albo wczytywania pliku, program powinien niezwłocznie zakończyć pracę z komunikatem Failed to allocate memory oraz kodem błędu 8.

W przypadku, kiedy podany plik nie istnieje program powinien wyświetlić komunikat Couldn't open file i zakończyć pracę z kodem błędu 4.

W przypadku kiedy dane w pliku będą nieprawidłowe, program powinien wyświetlić komunikat File corrupted i zakończyć pracę z kodem błędu 7.

W razie poprawnego wczytaniu zawartości podanego pliku do struktury program powinien posortować rosnąco liczby i zapisać je do pliku z przyrostkiem _sorted w nazwie (pomijając rozszerzenie (jeżeli na wejściu podano big.bin, to plik wyjściowy powinien mieć nazwę big_sorted.bin). W przypadku braku pamięci na nową nazwę program kończy pracę z komunikatem Failed to allocate memory i kodem błędu 8.

Jeżeli nie udało się zapisać danych do pliku to program powinien wyświetlić komunikat Couldn't create file a w przypadku sukcesu File saved.

Po operacji zapisu do pliku, program ma wyświetlić w następnej linii sumę liczb z wczytanej struktury bn. Jeżeli nie uda się obliczyć sumy liczb program powinien wyświetlić komunikat Error zamiast wartości liczbowej.

Przykładowa interakcja z programem -- plik uszkodozny:

Podaj nazwe pliku: big.bin⏎
File corrupted
Plik: big.bin

Przykładowa interakcja z programem -- sukces:

Podaj nazwe pliku: plant.bin⏎
File saved⏎
2181
Plik plant.bin, plant_sorted.bin

Przykładowa interakcja z programem -- błąd wejścia:

Podaj nazwe pliku: exact.bin⏎
Couldn't open file