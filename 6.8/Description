Napisz funkcję sort, która sortuje w miejscu tablicę dowolnego typu, daną wskaźnikiem.

Funkcja ma przyjąć jako parametry:

wskaźnik na tablicę do sortowania,
liczbę elementów tablicy,
rozmiar pojedynczego elementu tablicy oraz
wskaźnik na funkcję, porównującą wartości dwóch elementów.
Wskaźnik komparatora ma być zbudowany w oparciu o następujący prototyp:

int comparator(const void *ptr1, const void *ptr2);
gdzie:

ptr1 - wskaźnik na pierwszy element do porównania,
ptr2 - wskaźnik na drugi element do porównania.
Wartość zwracana:

Funkcja powinna zwrócić wartość:

dodatnią - jeżeli elementy ułożone są malejąco (np. *ptr1 > *ptr2),
zero - w przypadku kiedy oba elementy identyczne,
ujemną - w przypadku kiedy elementy ułożone są rosnąco (np. *ptr1 < *ptr2).
Przygotuj funkcje komparujące do porównywania dwóch wartości typu:

int (funkcja comp_int),
double (funkcja comp_double),
point_t (funkcja comp_point). Punkty 1 oraz 2 są ułożone malejąco, jeżeli wartość pierwszej współrzędnej x punktu 1 jest większa od tej punktu 2.
W przypadku równych wartości pierwszej współrzędnej należy porównać współrzędną y. Skoro tak, to punkty 1 oraz 2 są ułożone malejąco, jeżeli wartość drugiej współrzędnej y punktu 1 jest większa od tej punktu 2.
Struktura point_t powinna wyglądać następująco:

struct point_t
{
	double x;
	double y;
};

Przygotuj funkcję sort, która posortuje elementy rosnąco. Jej przykładowe wywołanie powinno wyglądać następująco:

int tab[] = {-46, -81, 89, -13, -24, -65, 78, -32, -92, -43, 58, -48, 87, 31, 81};
int res = sort(tab, 15, sizeof(int), comp_int);
Wartość zwracana:

0 - w przypadku sukcesu lub
1 - w przypadku porażki.
Deklaracje wszystkich funkcji umieść w pliku nagłówkowym comparators.h, a definicje w pliku comparators.c.

Napisz program, który przetestuje działanie przygotowanych przez Ciebie funkcji.

Program powinien pobrać od użytkownika typ danych, jaki ten chce wprowadzić:

0 - dane typu int,
1 - dane typu double,
2 - dane typu point_t.
Następnie program powinien pobrać liczbę elementów, jakie użytkownik chce wprowadzić, zaalokować dynamicznie tablicę na żądaną liczbę elementów a w przypadku powodzenia pobrać wartości.

Na koniec program powinien wyświetlić zawartość tablicy po sortowaniu funkcją sort.

W przypadku punktów ich współrzędne podawane są w kolejności x y. Punkty mają być wyświetlone w oddzielnych liniach.

W przypadku niemożliwości zaalokowania wszystkich niezbędnych elementów tablicy przerwij niezwłocznie program z komunikatem Failed to allocate memory i kodem błędu 8.
Jeśli użytkownik podał nieprawidłowy rozmiar tablicy, przerwij program z komunikatem Incorrect input data i kodem błędu 2.
W przypadku wprowadzenia przez użytkownika nieprawidłowych znaków program powinien zostać przerwany z kodem błędu 1 i komunikatem Incorrect input.
Przykładowa interakcja z programem -- sukces:

Enter data type: 1⏎
Enter array size: 12⏎
Enter doubles: -81.219271 4.657911 17.654240 71.325041 87.517183 -38.451480 -6.946019 34.984136 -40.770883 -59.551178 41.781767 66.277564 ⏎
-81.219271 -59.551178 -40.770883 -38.451480 -6.946019 4.657911 17.654240 34.984136 41.781767 66.277564 71.325041 87.517183 
Enter data type: 2⏎
Enter array size: 13⏎
Enter points: 3.397133 0.735758⏎
46.592019 -30.310731⏎
19.251146 84.966176⏎
21.655618 -52.262444⏎
-71.037947 -56.678331⏎
47.071559 40.722345⏎
-19.819276 -53.818373⏎
61.229947 97.218168⏎
19.222281 29.202115⏎
-17.066286 -38.724662⏎
-6.657279 -82.068153⏎
-45.487240 -67.975797⏎
59.049874 77.031235⏎
-71.037947 -56.678331⏎
-45.487240 -67.975797⏎
-19.819276 -53.818373⏎
-17.066286 -38.724662⏎
-6.657279 -82.068153⏎
3.397133 0.735758⏎
19.222281 29.202115⏎
19.251146 84.966176⏎
21.655618 -52.262444⏎
46.592019 -30.310731⏎
47.071559 40.722345⏎
59.049874 77.031235⏎
61.229947 97.218168⏎
Enter data type: 0⏎
Enter array size: 194⏎
Enter ints: -22 -13 90 -17 -17 -81 65 53 -58 -64 -94 -82 63 71 -34 41 43 78 -33 -10 -6 34 61 -79 81 99 83 56 -50 -22 -41 -48 30 16 73 -84 56 54 70 93 -89 -91 -96 -32 14 79 75 39 -30 47 24 -11 27 34 7 89 83 -53 78 -35 78 85 -15 38 41 53 -88 7 23 -79 -36 7 25 68 -98 42 -65 0 -89 -91 -100 79 -39 -51 -16 -53 -17 -46 66 11 -96 -12 -14 71 32 -10 97 -99 35 94 79 73 -64 64 -24 2 61 -100 61 42 -21 82 36 -47 -16 48 30 -16 -92 -2 0 -71 43 56 -3 18 71 32 61 51 -45 9 81 14 17 77 -46 59 -1 -7 -62 44 -63 83 -58 -77 95 61 35 -9 -68 24 -59 -61 14 -40 -76 84 -81 74 -79 93 -82 52 -76 16 -41 -89 -13 -37 -29 -17 71 83 11 97 23 92 -65 58 -5 82 24 -12 95 18 23 -34 71 -13 32 82 -53 -54 ⏎
-100 -100 -99 -98 -96 -96 -94 -92 -91 -91 -89 -89 -89 -88 -84 -82 -82 -81 -81 -79 -79 -79 -77 -76 -76 -71 -68 -65 -65 -64 -64 -63 -62 -61 -59 -58 -58 -54 -53 -53 -53 -51 -50 -48 -47 -46 -46 -45 -41 -41 -40 -39 -37 -36 -35 -34 -34 -33 -32 -30 -29 -24 -22 -22 -21 -17 -17 -17 -17 -16 -16 -16 -15 -14 -13 -13 -13 -12 -12 -11 -10 -10 -9 -7 -6 -5 -3 -2 -1 0 0 2 7 7 7 9 11 11 14 14 14 16 16 17 18 18 23 23 23 24 24 24 25 27 30 30 32 32 32 34 34 35 35 36 38 39 41 41 42 42 43 43 44 47 48 51 52 53 53 54 56 56 56 58 59 61 61 61 61 61 63 64 65 66 68 70 71 71 71 71 71 73 73 74 75 77 78 78 78 79 79 79 81 81 82 82 82 83 83 83 83 84 85 89 90 92 93 93 94 95 95 97 97 99 
Przykładowa interakcja z programem -- brak pamięci:

Limit sterty: 103 bajty

Enter data type: 2⏎
Enter array size: 8⏎
Failed to allocate memory⏎
Przykładowa interakcja z programem -- błąd danych:

Enter data type: 1⏎
Enter array size: 0⏎
Incorrect input data
Enter data type: 1⏎
Enter array size: xWlXHZRb⏎
Incorrect input
Enter data type: 2⏎
Enter array size: 7⏎
Enter points: 86.598996 83.646955⏎
-71.806311 -15.668261⏎
5.966803 13.257419⏎
1.606691 -57.378219⏎
81.824077 94.809143⏎
-29.560104 38.335301⏎
-14.417794 kFzTS⏎
Incorrect input
Enter data type: 1⏎
Enter array size: 10⏎
Enter doubles: RDYWDjYEDp⏎
Incorrect input
Uwagi
W programie nie wolno korzystać z operatora [].
W programie nie wolno korzystać z funkcj qsort.